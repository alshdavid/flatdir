name: Release

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

on: 
  push:
    branches:
      - "main"

jobs:
  build:
    strategy:
      matrix:
        config:
          - name: üê• Linux AMD64
            os: linux
            arch: amd64
            runner: ubuntu-latest
            run: rustup target add x86_64-unknown-linux-musl

          - name: üê• Linux ARM64
            os: linux
            arch: arm64
            runner: ubuntu-latest-arm
            run: rustup target add aarch64-unknown-linux-musl

          - name: üçé MacOS AMD64
            os: macos
            arch: amd64
            runner: macos-latest
            run: rustup target add x86_64-apple-darwin

          - name: üçé MacOS ARM64
            os: macos
            arch: arm64
            runner: macos-latest

          - name: üü¶ Windows AMD64
            os: windows
            arch: amd64
            runner: windows-latest

          - name: üü¶ Windows ARM64
            os: windows
            arch: arm64
            runner: windows-latest
            run: rustup target add aarch64-pc-windows-msvc

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.runner }}
    steps:
      - uses: actions/checkout@v4
      - run: eval $(curl -sSf sh.davidalsh.com/rust.sh | sh)
      - run: eval $(curl -sSf sh.davidalsh.com/just.sh | sh)
      - if: matrix.config.run
        run: ${{ matrix.config.run }}
      - run: just build
        env: 
          os: "${{ matrix.config.os }}"
          arch: "${{ matrix.config.arch }}"
      - uses: actions/upload-artifact@v4
        with:
          name: flatdir-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: ${{ github.workspace }}/target/${{ matrix.config.os }}-${{ matrix.config.arch }}/**/*
          if-no-files-found: error
          retention-days: 1

  publish-github-release:
    name: "üîÑ Publish Github Release"
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - name: Publish` Github Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          ls -l -a
          # TAG="$(date -u +"v%Y.%m.%d.%H%M").${GITHUB_SHA::4}"
          # echo "Tag: ${TAG}"

          # gh release create $TAG  --draft --notes "Automatically built binaries"
          # gh release edit $TAG --title "üöÄ Latest"

          # gh release upload $TAG flatdir-linux-amd64/flatdir-linux-amd64.tar.gz
          # gh release upload $TAG flatdir-linux-arm64/flatdir-linux-arm64.tar.gz
          # gh release upload $TAG flatdir-macos-amd64/flatdir-macos-amd64.tar.gz
          # gh release upload $TAG flatdir-macos-arm64/flatdir-macos-arm64.tar.gz
          # gh release upload $TAG flatdir-windows-amd64/flatdir-windows-amd64.tar.gz
          # gh release upload $TAG flatdir-windows-arm64/flatdir-windows-arm64.tar.gz
          
          # gh release edit $TAG --draft=false
